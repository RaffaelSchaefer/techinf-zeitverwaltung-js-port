generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Position {
  id    Int    @id @default(autoincrement())
  name  String @unique
  Users User[]
}

model User {
  id         Int       @id @default(autoincrement())
  first_name String
  last_name  String
  status     Boolean   @default(false)
  positionId Int
  Position   Position  @relation(references: [id], fields: [positionId])
  Logs       Log[]
  Addresses  Address[]
  Cards      Card[]
}

model Admin {
  email    String  @unique
  password String
  name     String  @id
}

model Card {
  uid    String @id
  Logs   Log[]
  User   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?
}

model Address {
  id           Int    @id @default(autoincrement())
  street_name  String
  house_number String
  town_name    String
  postal_code  String
  country      String
  User         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int

  @@unique([street_name, house_number, town_name, postal_code, country, userId])
}

model Log {
  id      Int      @id @default(autoincrement())
  time    DateTime @default(now())
  status  Boolean
  Card    Card?    @relation(fields: [cardUid], references: [uid], onDelete: SetNull)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardUid String?
  userId  Int

  @@unique([time, cardUid])
}
